// the version of the language, use proto3 for contracts
syntax = "proto3";

import "aelf/core.proto";
import "aelf/options.proto";
import "acs12.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "EcoEarn.Contracts.Points";

service EcoEarnPointsContract {
  option (aelf.base) = "acs12.proto";
  option (aelf.csharp_state) = "EcoEarn.Contracts.Points.EcoEarnPointsContractState";

  // contract
  rpc Initialize (InitializeInput) returns (google.protobuf.Empty) {}
  rpc SetConfig (Config) returns (google.protobuf.Empty) {}
  rpc GetConfig (google.protobuf.Empty) returns (Config) {option (aelf.is_view) = true;}
  rpc SetAdmin (aelf.Address) returns (google.protobuf.Empty) {}
  rpc GetAdmin (google.protobuf.Empty) returns (aelf.Address) {option (aelf.is_view) = true;}

  // Pool
  rpc Register (RegisterInput) returns (google.protobuf.Empty) {}
  rpc SetDappAdmin (SetDappAdminInput) returns (google.protobuf.Empty) {}
  rpc GetDappInfo (aelf.Hash) returns (DappInfo) {option (aelf.is_view) = true;}
  rpc CreatePointsPool (CreatePointsPoolInput) returns (google.protobuf.Empty) {}
  rpc SetPointsPoolEndTime (SetPointsPoolEndTimeInput) returns (google.protobuf.Empty) {}
  rpc RestartPointsPool (RestartPointsPoolInput) returns (google.protobuf.Empty) {}
  rpc SetPointsPoolUpdateAddress (SetPointsPoolUpdateAddressInput) returns (google.protobuf.Empty) {}
  rpc SetPointsPoolRewardConfig (SetPointsPoolRewardConfigInput) returns (google.protobuf.Empty) {}
  rpc SetPointsPoolRewardPerSecond (SetPointsPoolRewardPerSecondInput) returns (google.protobuf.Empty) {}
  rpc GetPoolInfo (aelf.Hash) returns (GetPoolInfoOutput) {option (aelf.is_view) = true;}
  rpc GetPoolData (aelf.Hash) returns (PoolData) {option (aelf.is_view) = true;}
  rpc GetPoolAddress (aelf.Hash) returns (aelf.Address) {option (aelf.is_view) = true;}

  // reward
  rpc UpdateSnapshot (UpdateSnapshotInput) returns (google.protobuf.Empty) {}
  rpc GetSnapshot (GetSnapshotInput) returns (Snapshot) {option (aelf.is_view) = true;}
  rpc Claim (ClaimInput) returns (google.protobuf.Empty) {}
  rpc RecoverToken (RecoverTokenInput) returns (google.protobuf.Empty) {}
}

message InitializeInput {
  aelf.Address admin = 1;
  aelf.Address points_contract = 2;
  aelf.Address ecoearn_tokens_contract = 3;
  aelf.Address ecoearn_rewards_contract = 4;
  int64 commission_rate = 5;
  aelf.Address recipient = 6;
}

message Config {
  int64 commission_rate = 1;
  aelf.Address recipient = 2;
}

message RegisterInput {
  aelf.Hash dapp_id = 1;
  aelf.Address admin = 2;
}

message DappInfo {
  aelf.Hash dapp_id = 1;
  aelf.Address admin = 2;
}

message CreatePointsPoolInput {
  aelf.Hash dapp_id = 1;
  string points_name = 2;
  string reward_token = 3;
  int64 start_time = 4;
  int64 end_time = 5;
  int64 reward_per_second = 6;
  aelf.Address update_address = 7;
  repeated int64 release_periods = 8;
  int64 claim_interval = 9;
}

message PointsPoolConfig {
  string reward_token = 1;
  google.protobuf.Timestamp start_time = 2;
  google.protobuf.Timestamp end_time = 3;
  int64 reward_per_second = 4;
  aelf.Address update_address = 5;
  repeated int64 release_periods = 6;
  int64 claim_interval = 7;
}

message SetPointsPoolConfigInput {
  aelf.Hash pool_id = 1;
  PointsPoolConfig config = 2;
}

message GetPoolInfoOutput {
  PoolInfo pool_info = 1;
  bool status = 2;
}

message PoolInfo {
  aelf.Hash dapp_id = 1;
  aelf.Hash pool_id = 2;
  string points_name = 3;
  PointsPoolConfig config = 4;
}

message UpdateSnapshotInput {
  aelf.Hash pool_id = 1;
  aelf.Hash merkle_tree_root = 2;
}

message Snapshot {
  aelf.Hash pool_id = 1;
  int64 block_number = 2;
  aelf.Hash merkle_tree_root = 3;
}

message GetSnapshotInput {
  aelf.Hash pool_id = 1;
  int64 block_number = 2;
}

message ClaimInput {
  aelf.Hash pool_id = 1;
  aelf.Address account = 2;
  int64 amount = 3;
  aelf.Hash seed = 4;
  int64 expiration_time = 5;
  bytes signature = 10000;
}

message RecoverTokenInput {
  aelf.Hash pool_id = 1;
  string token = 2;
  aelf.Address recipient = 3;
}

message SetPointsPoolEndTimeInput {
  aelf.Hash pool_id = 1;
  int64 end_time = 2;
}

message RestartPointsPoolInput {
  aelf.Hash pool_id = 1;
  string reward_token = 2;
  int64 start_time = 3;
  int64 end_time = 4;
  int64 reward_per_second = 5;
  aelf.Address update_address = 6;
  repeated int64 release_periods = 7;
  int64 claim_interval = 8;
}

message SetPointsPoolUpdateAddressInput {
  aelf.Hash pool_id = 1;
  aelf.Address update_address = 2;
}

message SetPointsPoolRewardConfigInput {
  aelf.Hash pool_id = 1;
  repeated int64 release_periods = 2;
  int64 claim_interval = 3;
}

message LongList {
  repeated int64 data = 1;
}

message SetPointsPoolRewardPerSecondInput {
  aelf.Hash pool_id = 1;
  int64 reward_per_second = 2;
}

message SetDappAdminInput {
  aelf.Hash dapp_id = 1;
  aelf.Address admin = 2;
}

message PoolData {
  aelf.Hash pool_id = 1;
  google.protobuf.Timestamp last_rewards_update_time = 2;
  int64 calculated_rewards = 3;
  int64 claimed_rewards = 4;
}

// log event
message ConfigSet {
  option (aelf.is_event) = true;
  Config config = 1;
}

message AdminSet {
  option (aelf.is_event) = true;
  aelf.Address admin = 1;
}

message Registered {
  option (aelf.is_event) = true;
  aelf.Hash dapp_id = 1;
  aelf.Address admin = 2;
}

message PointsPoolCreated {
  option (aelf.is_event) = true;
  aelf.Hash dapp_id = 1;
  PointsPoolConfig config = 2;
  aelf.Hash pool_id = 3;
  string points_name = 4;
  int64 amount = 5;
  aelf.Address pool_address = 6;
}

message SnapshotUpdated {
  option (aelf.is_event) = true;
  aelf.Hash pool_id = 1;
  aelf.Hash merkle_tree_root = 2;
  int64 update_block_number = 3;
}

message Claimed {
  option (aelf.is_event) = true;
  aelf.Hash pool_id = 1;
  aelf.Address account = 2;
  int64 amount = 3;
  aelf.Hash seed = 4;
}

message TokenRecovered {
  option (aelf.is_event) = true;
  aelf.Hash pool_id = 1;
  string token = 2;
  int64 amount = 3;
  aelf.Address account = 4;
}

message PointsPoolEndTimeSet {
  option (aelf.is_event) = true;
  aelf.Hash pool_id = 1;
  google.protobuf.Timestamp end_time = 2;
  int64 amount = 3;
}

message PointsPoolRestarted {
  option (aelf.is_event) = true;
  aelf.Hash pool_id = 1;
  PointsPoolConfig config = 2;
  int64 amount = 3;
}

message PointsPoolUpdateAddressSet {
  option (aelf.is_event) = true;
  aelf.Hash pool_id = 1;
  aelf.Address update_address = 2;
}

message PointsPoolRewardConfigSet {
  option (aelf.is_event) = true;
  aelf.Hash pool_id = 1;
  LongList release_periods = 2;
  int64 claim_interval = 3;
}

message PointsPoolRewardPerSecondSet {
  option (aelf.is_event) = true;
  aelf.Hash pool_id = 1;
  int64 reward_per_second = 2;
}

message DappAdminSet {
  option (aelf.is_event) = true;
  aelf.Hash dapp_id = 1;
  aelf.Address admin = 2;
}