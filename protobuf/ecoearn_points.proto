// the version of the language, use proto3 for contracts
syntax = "proto3";

import "aelf/core.proto";
import "aelf/options.proto";
import "acs12.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "EcoEarn.Contracts.Points";

service EcoEarnPointsContract {
  option (aelf.base) = "acs12.proto";
  option (aelf.csharp_state) = "EcoEarn.Contracts.Points.EcoEarnPointsContractState";

  // contract
  rpc Initialize (InitializeInput) returns (google.protobuf.Empty) {}
  rpc SetConfig (Config) returns (google.protobuf.Empty) {}
  rpc GetConfig (google.protobuf.Empty) returns (Config) {option (aelf.is_view) = true;}
  rpc SetAdmin (aelf.Address) returns (google.protobuf.Empty) {}
  rpc GetAdmin (google.protobuf.Empty) returns (aelf.Address) {option (aelf.is_view) = true;}

  // Pool
  rpc Register (RegisterInput) returns (google.protobuf.Empty) {}
  rpc SetDappAdmin (SetDappAdminInput) returns (google.protobuf.Empty) {}
  rpc GetDappInfo (aelf.Hash) returns (DappInfo) {option (aelf.is_view) = true;}
  rpc CreatePointsPool (CreatePointsPoolInput) returns (google.protobuf.Empty) {}
  rpc SetPointsPoolEndTime (SetPointsPoolEndTimeInput) returns (google.protobuf.Empty) {}
  rpc RestartPointsPool (RestartPointsPoolInput) returns (google.protobuf.Empty) {}
  rpc SetPointsPoolUpdateAddress (SetPointsPoolUpdateAddressInput) returns (google.protobuf.Empty) {}
  rpc SetPointsPoolRewardReleasePeriod (SetPointsPoolRewardReleasePeriodInput) returns (google.protobuf.Empty) {}
  rpc SetPointsPoolRewardPerSecond (SetPointsPoolRewardPerSecondInput) returns (google.protobuf.Empty) {}
  rpc GetPoolInfo (aelf.Hash) returns (GetPoolInfoOutput) {option (aelf.is_view) = true;}
  rpc GetPoolAddress (aelf.Hash) returns (aelf.Address) {option (aelf.is_view) = true;}

  // reward
  rpc UpdateSnapshot (UpdateSnapshotInput) returns (google.protobuf.Empty) {}
  rpc GetSnapshot (GetSnapshotInput) returns (Snapshot) {option (aelf.is_view) = true;}
  rpc Claim (ClaimInput) returns (google.protobuf.Empty) {}
  rpc GetClaimInfo (aelf.Hash) returns (ClaimInfo) {option (aelf.is_view) = true;}
  rpc Withdraw (WithdrawInput) returns (google.protobuf.Empty) {}
  rpc EarlyStake (EarlyStakeInput) returns (google.protobuf.Empty) {}
  rpc RecoverToken (RecoverTokenInput) returns (google.protobuf.Empty) {}
}

message InitializeInput {
  aelf.Address admin = 1;
  aelf.Address points_contract = 2;
  aelf.Address ecoearn_tokens_contract = 3;
  int64 commission_rate = 4;
  aelf.Address recipient = 5;
}

message Config {
  int64 commission_rate = 1;
  aelf.Address recipient = 2;
}

message RegisterInput {
  aelf.Hash dapp_id = 1;
  aelf.Address admin = 2;
}

message DappInfo {
  aelf.Hash dapp_id = 1;
  aelf.Address admin = 2;
}

message CreatePointsPoolInput {
  aelf.Hash dapp_id = 1;
  string points_name = 2;
  string reward_token = 3;
  int64 start_time = 4;
  int64 end_time = 5;
  int64 reward_per_second = 6;
  aelf.Address update_address = 7;
  int64 release_period = 8;
}

message PointsPoolConfig {
  string reward_token = 1;
  google.protobuf.Timestamp start_time = 2;
  google.protobuf.Timestamp end_time = 3;
  int64 reward_per_second = 4;
  aelf.Address update_address = 5;
  int64 release_period = 6;
}

message SetPointsPoolConfigInput {
  aelf.Hash pool_id = 1;
  PointsPoolConfig config = 2;
}

message GetPoolInfoOutput {
  PoolInfo pool_info = 1;
  bool status = 2;
}

message PoolInfo {
  aelf.Hash dapp_id = 1;
  aelf.Hash pool_id = 2;
  string points_name = 3;
  PointsPoolConfig config = 4;
}

message UpdateSnapshotInput {
  aelf.Hash pool_id = 1;
  aelf.Hash merkle_tree_root = 2;
}

message Snapshot {
  aelf.Hash pool_id = 1;
  int64 block_number = 2;
  aelf.Hash merkle_tree_root = 3;
}

message GetSnapshotInput {
  aelf.Hash pool_id = 1;
  int64 block_number = 2;
}

message ClaimInput {
  aelf.Hash pool_id = 1;
  aelf.Address account = 2;
  int64 amount = 3;
  aelf.Hash seed = 4;
  int64 expiration_time = 5;
  bytes signature = 10000;
}

message ClaimInfo {
  aelf.Hash claim_id = 1;
  aelf.Hash pool_id = 2;
  int64 claimed_amount = 3;
  string claimed_symbol = 4;
  int64 claimed_block_number = 5;
  google.protobuf.Timestamp claimed_time = 6;
  google.protobuf.Timestamp unlock_time = 7;
  google.protobuf.Timestamp withdraw_time = 8;
  aelf.Address account = 9;
  google.protobuf.Timestamp early_stake_time = 10;
  aelf.Hash stake_id = 11;
}

message EarlyStakeInput {
  aelf.Hash pool_id = 1;
  int64 period = 2;
  repeated aelf.Hash claim_ids = 3;
}

message ClaimInfos {
  repeated ClaimInfo data = 1;
}

message RecoverTokenInput {
  aelf.Hash pool_id = 1;
  string token = 2;
  aelf.Address recipient = 3;
}

message SetPointsPoolEndTimeInput {
  aelf.Hash pool_id = 1;
  int64 end_time = 2;
}

message RestartPointsPoolInput {
  aelf.Hash pool_id = 1;
  string reward_token = 2;
  int64 start_time = 3;
  int64 end_time = 4;
  int64 reward_per_second = 5;
  aelf.Address update_address = 6;
  int64 release_period = 7;
}

message SetPointsPoolUpdateAddressInput {
  aelf.Hash pool_id = 1;
  aelf.Address update_address = 2;
}

message SetPointsPoolRewardReleasePeriodInput {
  aelf.Hash pool_id = 1;
  int64 release_period = 2;
}

message SetPointsPoolRewardPerSecondInput {
  aelf.Hash pool_id = 1;
  int64 reward_per_second = 2;
}

message SetDappAdminInput {
  aelf.Hash dapp_id = 1;
  aelf.Address admin = 2;
}

message WithdrawInput {
  repeated aelf.Hash claim_ids = 1;
}

// log event
message ConfigSet {
  option (aelf.is_event) = true;
  Config config = 1;
}

message AdminSet {
  option (aelf.is_event) = true;
  aelf.Address admin = 1;
}

message Registered {
  option (aelf.is_event) = true;
  aelf.Hash dapp_id = 1;
  aelf.Address admin = 2;
}

message PointsPoolCreated {
  option (aelf.is_event) = true;
  aelf.Hash dapp_id = 1;
  PointsPoolConfig config = 2;
  aelf.Hash pool_id = 3;
  string points_name = 4;
  int64 amount = 5;
  aelf.Address pool_address = 6;
}

message SnapshotUpdated {
  option (aelf.is_event) = true;
  aelf.Hash pool_id = 1;
  aelf.Hash merkle_tree_root = 2;
  int64 update_block_number = 3;
}

message Claimed {
  option (aelf.is_event) = true;
  ClaimInfo claim_info = 1;
  aelf.Hash seed = 2;
}

message Withdrawn {
  option (aelf.is_event) = true;
  ClaimInfos claim_infos = 1;
}

message EarlyStaked {
  option (aelf.is_event) = true;
  aelf.Hash pool_id = 1;
  int64 amount = 2;
  int64 period = 3;
  ClaimInfos claim_infos = 4;
}

message TokenRecovered {
  option (aelf.is_event) = true;
  aelf.Hash pool_id = 1;
  string token = 2;
  int64 amount = 3;
  aelf.Address account = 4;
}

message PointsPoolEndTimeSet {
  option (aelf.is_event) = true;
  aelf.Hash pool_id = 1;
  google.protobuf.Timestamp end_time = 2;
  int64 amount = 3;
}

message PointsPoolRestarted {
  option (aelf.is_event) = true;
  aelf.Hash pool_id = 1;
  PointsPoolConfig config = 2;
  int64 amount = 3;
}

message PointsPoolUpdateAddressSet {
  option (aelf.is_event) = true;
  aelf.Hash pool_id = 1;
  aelf.Address update_address = 2;
}

message PointsPoolRewardReleasePeriodSet {
  option (aelf.is_event) = true;
  aelf.Hash pool_id = 1;
  int64 release_period = 2;
}

message PointsPoolRewardPerSecondSet {
  option (aelf.is_event) = true;
  aelf.Hash pool_id = 1;
  int64 reward_per_second = 2;
}

message DappAdminSet {
  option (aelf.is_event) = true;
  aelf.Hash dapp_id = 1;
  aelf.Address admin = 2;
}