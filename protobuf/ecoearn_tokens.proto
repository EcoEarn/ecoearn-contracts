// the version of the language, use proto3 for contracts
syntax = "proto3";

import "aelf/core.proto";
import "aelf/options.proto";
import "acs12.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

option csharp_namespace = "EcoEarn.Contracts.Tokens";

service EcoEarnTokensContract {
  option (aelf.base) = "acs12.proto";
  option (aelf.csharp_state) = "EcoEarn.Contracts.Tokens.EcoEarnTokensContractState";

  rpc Register (RegisterInput) returns (google.protobuf.Empty) {}
  rpc SetDappAdmin (SetDappAdminInput) returns (google.protobuf.Empty) {}
  rpc GetDappInfo (aelf.Hash) returns (DappInfo) {option (aelf.is_view) = true;}
  rpc CreateTokensPool (CreateTokensPoolInput) returns (google.protobuf.Empty) {}
  rpc SetTokensPoolEndTime (SetTokensPoolEndTimeInput) returns (google.protobuf.Empty) {}
  rpc SetTokensPoolRewardReleasePeriod (SetTokensPoolRewardReleasePeriodInput) returns (google.protobuf.Empty) {}
  rpc SetTokensPoolStakeConfig (SetTokensPoolStakeConfigInput) returns (google.protobuf.Empty) {}
  rpc GetPoolInfo (aelf.Hash) returns (GetPoolInfoOutput) {option (aelf.is_view) = true;}
  rpc GetPoolData (aelf.Hash) returns (PoolData) {option (aelf.is_view) = true;}
  rpc GetPoolAddressInfo (aelf.Hash) returns (PoolAddressInfo) {option (aelf.is_view) = true;}
  rpc GetPoolCount (aelf.Hash) returns (google.protobuf.Int64Value) {option (aelf.is_view) = true;}
  rpc SetTokensPoolFixedBoostFactor (SetTokensPoolFixedBoostFactorInput) returns (google.protobuf.Empty) {}
  rpc SetTokensPoolRewardPerSecond (SetTokensPoolRewardPerSecondInput) returns (google.protobuf.Empty) {}
  rpc SetTokensPoolUnlockWindowDuration (SetTokensPoolUnlockWindowDurationInput) returns (google.protobuf.Empty) {}

  rpc Stake (StakeInput) returns (google.protobuf.Empty) {}
  rpc Renew (RenewInput) returns (google.protobuf.Empty) {}
  rpc EarlyStake (EarlyStakeInput) returns (google.protobuf.Empty) {}
  rpc StakeFor (StakeForInput) returns (google.protobuf.Empty) {}
  rpc GetStakeInfo (aelf.Hash) returns (GetStakeInfoOutput) {option (aelf.is_view) = true;}
  rpc GetReward (aelf.Hash) returns (GetRewardOutput) {option (aelf.is_view) = true;}
  rpc Unlock (aelf.Hash) returns (google.protobuf.Empty) {}
  rpc GetUserStakeId (GetUserStakeIdInput) returns (aelf.Hash) {option (aelf.is_view) = true;}
  rpc GetUserStakeCount (GetUserStakeCountInput) returns (google.protobuf.Int64Value) {option (aelf.is_view) = true;}

  rpc Claim (aelf.Hash) returns (google.protobuf.Empty) {}
  rpc GetClaimInfo (aelf.Hash) returns (ClaimInfo) {option (aelf.is_view) = true;}
  rpc Withdraw (WithdrawInput) returns (google.protobuf.Empty) {}
  rpc RecoverToken (RecoverTokenInput) returns (google.protobuf.Empty) {}

  rpc Initialize (InitializeInput) returns (google.protobuf.Empty) {}
  rpc SetConfig (Config) returns (google.protobuf.Empty) {}
  rpc GetConfig (google.protobuf.Empty) returns (Config) {option (aelf.is_view) = true;}
  rpc SetAdmin (aelf.Address) returns (google.protobuf.Empty) {}
  rpc GetAdmin (google.protobuf.Empty) returns (aelf.Address) {option (aelf.is_view) = true;}
}

message RegisterInput {
  aelf.Hash dapp_id = 1;
  aelf.Address admin = 2;
}

message DappInfo {
  aelf.Hash dapp_id = 1;
  aelf.Address admin = 2;
}

message CreateTokensPoolInput {
  aelf.Hash dapp_id = 1;
  string reward_token = 2;
  int64 start_time = 3;
  int64 end_time = 4;
  int64 reward_per_second = 5;
  string staking_token = 6;
  int64 fixed_boost_factor = 7;
  int64 minimum_amount = 8;
  int64 release_period = 9;
  int64 maximum_stake_duration = 10;
  aelf.Address reward_token_contract = 11;
  aelf.Address stake_token_contract = 12;
  int64 minimum_claim_amount = 13;
  int64 minimum_stake_duration = 14;
  int64 unlock_window_duration = 15;
}

message TokensPoolConfig {
  string reward_token = 1;
  google.protobuf.Timestamp start_time = 2;
  google.protobuf.Timestamp end_time = 3;
  int64 reward_per_second = 4;
  string staking_token = 5;
  int64 fixed_boost_factor = 6;
  int64 minimum_amount = 7;
  int64 release_period = 8;
  int64 maximum_stake_duration = 9;
  aelf.Address reward_token_contract = 10;
  aelf.Address stake_token_contract = 11;
  int64 minimum_claim_amount = 12;
  int64 minimum_stake_duration = 13;
  int64 unlock_window_duration = 14;
}

message SetTokensPoolEndTimeInput {
  aelf.Hash pool_id = 1;
  int64 end_time = 2;
}

message SetTokensPoolRewardReleasePeriodInput {
  aelf.Hash pool_id = 1;
  int64 release_period = 2;
}

message SetTokensPoolStakeConfigInput {
  aelf.Hash pool_id = 1;
  int64 minimum_amount = 2;
  int64 maximum_stake_duration = 3;
  int64 minimum_claim_amount = 4;
  int64 minimum_stake_duration = 5;
}

message SetTokensPoolFixedBoostFactorInput {
  aelf.Hash pool_id = 1;
  int64 fixed_boost_factor = 2;
}

message SetTokensPoolRewardPerSecondInput {
  aelf.Hash pool_id = 1;
  int64 reward_per_second = 2;
}

message SetTokensPoolUnlockWindowDurationInput {
  aelf.Hash pool_id = 1;
  int64 unlock_window_duration = 2;
}

message GetPoolInfoOutput {
  PoolInfo pool_info = 1;
  bool status = 2;
}

message PoolInfo {
  aelf.Hash dapp_id = 1;
  aelf.Hash pool_id = 2;
  TokensPoolConfig config = 3;
  aelf.BigIntValue precision_factor = 4;
}

message PoolData {
  aelf.Hash pool_id = 1;
  aelf.BigIntValue acc_token_per_share = 2;  // Accrued token per share
  google.protobuf.Timestamp last_reward_time = 3;    // The block number of the last pool update
  int64 total_staked_amount = 4;  // The amount of token staked
}

message StakeInput {
  aelf.Hash pool_id = 1;
  int64 amount = 2;
  int64 period = 3;
}

message StakeInfo {
  aelf.Hash stake_id = 1;
  aelf.Hash pool_id = 2;
  int64 staked_amount = 3;
  int64 early_staked_amount = 4;
  int64 staked_block_number = 5;
  google.protobuf.Timestamp staked_time = 6;
  int64 period = 7;  // total period
  aelf.Address account = 8;
  int64 boosted_amount = 9;
  int64 reward_debt = 10;
  google.protobuf.Timestamp unlock_time = 11;
  int64 reward_amount = 12;
  int64 locked_reward_amount = 13;
  int64 claimed_amount = 14;
  string staking_token = 15;
  google.protobuf.Timestamp last_operation_time = 16;
  int64 staking_period = 17;  // current position period
}

message RenewInput {
  aelf.Hash pool_id = 1;
  int64 period = 2;
}

message EarlyStakeInput {
  aelf.Hash pool_id = 1;
  int64 period = 2;
  repeated aelf.Hash claim_ids = 3;
}

message ClaimInfo {
  aelf.Hash claim_id = 1;
  aelf.Hash pool_id = 2;
  int64 claimed_amount = 3;
  string claimed_symbol = 4;
  int64 claimed_block_number = 5;
  google.protobuf.Timestamp claimed_time = 6;
  google.protobuf.Timestamp unlock_time = 7;
  google.protobuf.Timestamp withdraw_time = 8;
  aelf.Address account = 9;
  google.protobuf.Timestamp early_stake_time = 10;
  aelf.Hash stake_id = 11;
  aelf.Hash seed = 12;
}

message StakeForInput {
  aelf.Hash pool_id = 1;
  int64 amount = 2;
  int64 period = 3;
  aelf.Address address = 4;
  aelf.Address from_address = 5;
}

message GetStakeInfoOutput {
  StakeInfo stake_info = 1;
  bool is_in_unlock_window = 2;
}

message GetRewardOutput {
  aelf.Hash stake_id = 1;
  aelf.Address account = 2;
  string symbol = 3;
  int64 amount = 4;
}

message WithdrawInput {
  repeated aelf.Hash claim_ids = 1;
}

message RecoverTokenInput {
  aelf.Hash pool_id = 1;
  string token = 2;
  aelf.Address recipient = 3;
}

message HashList {
  repeated aelf.Hash data = 1;
}

message InitializeInput {
  aelf.Address admin = 1;
  aelf.Address ecoearn_points_contract = 2;
  int64 commission_rate = 3;
  aelf.Address recipient = 4;
  bool is_register_restricted = 5;
}

message Config {
  int64 commission_rate = 1;
  aelf.Address recipient = 2;
  bool is_register_restricted = 3;
}

message SetDappAdminInput {
  aelf.Hash dapp_id = 1;
  aelf.Address admin = 2;
}

message GetUserStakeIdInput {
  aelf.Hash pool_id = 1;
  aelf.Address account = 2;
}

message GetUserStakeCountInput {
  aelf.Hash pool_id = 1;
  aelf.Address account = 2;
}

message EarlyStakeInfo {
  map<string, int64> data = 1;
}

message PoolAddressInfo {
  aelf.Address stake_address = 1;
  aelf.Address reward_address = 2;
}

// log event
message Registered {
  option (aelf.is_event) = true;
  aelf.Hash dapp_id = 1;
  aelf.Address admin = 2;
}

message TokensPoolCreated {
  option (aelf.is_event) = true;
  aelf.Hash dapp_id = 1;
  TokensPoolConfig config = 2;
  aelf.Hash pool_id = 3;
  int64 amount = 4;
  PoolAddressInfo address_info = 5;
}

message TokensPoolEndTimeSet {
  option (aelf.is_event) = true;
  aelf.Hash pool_id = 1;
  google.protobuf.Timestamp end_time = 2;
  int64 amount = 3;
}

message TokensPoolRewardReleasePeriodSet {
  option (aelf.is_event) = true;
  aelf.Hash pool_id = 1;
  int64 release_period = 2;
}

message TokensPoolStakeConfigSet {
  option (aelf.is_event) = true;
  aelf.Hash pool_id = 1;
  int64 minimum_amount = 2;
  int64 maximum_stake_duration = 3;
  int64 minimum_claim_amount = 4;
  int64 minimum_stake_duration = 5;
}

message Staked {
  option (aelf.is_event) = true;
  StakeInfo stake_info = 1;
  PoolData pool_data = 2;
}

message Unlocked {
  option (aelf.is_event) = true;
  aelf.Hash stake_id = 1;
  int64 staked_amount = 2;
  int64 early_staked_amount = 3;
  PoolData pool_data = 4;
}

message Claimed {
  option (aelf.is_event) = true;
  aelf.Hash stake_id = 1;
  ClaimInfo claim_info = 2;
}

message TokenRecovered {
  option (aelf.is_event) = true;
  aelf.Hash pool_id = 1;
  string token = 2;
  int64 amount = 3;
  aelf.Address account = 4;
}

message ConfigSet {
  option (aelf.is_event) = true;
  Config config = 1;
}

message AdminSet {
  option (aelf.is_event) = true;
  aelf.Address admin = 1;
}

message DappAdminSet {
  option (aelf.is_event) = true;
  aelf.Hash dapp_id = 1;
  aelf.Address admin = 2;
}

message TokensPoolFixedBoostFactorSet {
  option (aelf.is_event) = true;
  aelf.Hash pool_id = 1;
  int64 fixed_boost_factor = 2;
}
    
message TokensPoolRewardPerSecondSet {
  option (aelf.is_event) = true;
  aelf.Hash pool_id = 1;
  int64 reward_per_second = 2;
  PoolData pool_data = 3;
}

message TokensPoolUnlockWindowDurationSet {
  option (aelf.is_event) = true;
  aelf.Hash pool_id = 1;
  int64 unlock_window_duration = 2;
}

message Renewed {
  option (aelf.is_event) = true;
  StakeInfo stake_info = 1;
  PoolData pool_data = 2;
}